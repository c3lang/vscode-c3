%YAML 1.2
---
$schema: "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json"
name: C3
fileTypes:
  - c3
  - c3i
  - c3t
scopeName: source.c3

patterns:
  - include: "#top_level"

repository:
  top_level:
    patterns:
      - include: "#comments"

      # Modifier
      - include: "#modifier_keywords"

      # Compile Time Statements
      - begin: '\$(?:assert|include|echo|exec)\b'
        beginCaptures: 
          0: { name: keyword.other.c3 }
        end: ;
        endCaptures:
          0: { name: punctuation.terminator.c3 }
        patterns:
          - include: "#comments"
          - include: "#expression"

      # Module
      - begin: \bmodule\b
        beginCaptures:
          0: { name: keyword.declaration.module.c3 }
        end: ;
        endCaptures:
          0: { name: punctuation.terminator.c3 }
        patterns: 
          - include: "#comments"
          - include: "#attribute"
          - include: "#path"
          - match: '{{IDENT}}'
            name: meta.path.c3
          - include: "#generic_params"

      # Import
      - begin: \bimport\b
        beginCaptures:
          0: { name: keyword.declaration.import.c3 }
        end: ;
        endCaptures:
          0: { name: punctuation.terminator.c3 }
        patterns: 
          - include: "#comments"
          - include: "#attribute"
          - include: "#path"
          - match: '{{IDENT}}'
            name: meta.path.c3

      - include: "#function"

      # Define/Distinct
      - begin: '\b(?:def|distinct)\b'
        beginCaptures:
          0: { name: keyword.declaration.type.c3 }
        end: ;
        endCaptures:
          0: { name: punctuation.terminator.c3 }
        patterns:
          - include: "#comments"
          # Custom Attribute
          - begin: '@{{TYPE}}'
            beginCaptures: 
              0: { name: keyword.annotation.c3 }
            end: (?=;)
            patterns:
              - include: "#comments"
              - include: "#parens"
              - begin: \=
                beginCaptures:
                  0: { name: keyword.operator.assignment.c3 }
                end: (?=;)
                patterns:
                  - include: "#comments"
                  - include: "#attribute"
                  - begin: \{
                    beginCaptures: 
                      0: { name: meta.block.c3 punctuation.section.block.begin.c3 }
                    end: \}
                    endCaptures: 
                      0: { name: meta.block.c3 punctuation.section.block.end.c3 }
                    contentName: meta.block.c3
                    patterns:
                      - include: "#comments"
                      - include: "#attribute"
                      - include: "#punctuation"
          # Type/variable/constant def
          - begin: '\b(?:({{TYPE}})|({{IDENT}})|({{CONST}}))\b'
            beginCaptures: 
              1: { name: support.type.c3 }
              2: { name: variable.global.c3 }
              3: { name: variable.other.constant.c3 }
            end: (?=;)
            patterns:
              - include: "#comments"
              - include: "#attribute"
              - begin: \=
                beginCaptures:
                  0: { name: keyword.operator.assignment.c3 }
                end: (?=;)
                patterns:
                  - include: "#comments"
                  - include: "#attribute"
                  - include: "#expression"

      # Struct/Bitstruct/Union (structlikes)
      - include: "#structlike"

      # Enum/Fault
      - begin: '(?=\b(?:enum|fault)\b)'
        end: (?<=\})
        patterns:
          - begin: '\b(?:enum|fault)\b'
            beginCaptures: 
              0: { name: meta.enum.c3 keyword.declaration.enum.c3 }
            end: (?=\{)
            contentName: meta.enum.c3
            patterns:
              - include: "#comments"
              - match: '\b{{TYPE}}\b'
                name: entity.name.type.enum.c3
              - include: "#attribute"
              - begin: ':'
                beginCaptures:
                  0 : { name: punctuation.separator.c3 }
                end: (?=\{)
                patterns:
                  - include: "#comments"
                  - include: "#type"
                  # Enum parameters
                  - begin: '\('
                    beginCaptures:
                      0: { name: punctuation.section.group.begin.c3 }
                    end: '\)'
                    endCaptures:
                      0: { name: punctuation.section.group.end.c3 }
                    contentName: meta.group.c3
                    patterns:
                      - include: "#comments"
                      - include: "#type"
                      - include: "#punctuation"
                      - match: '{{IDENT}}'
                        name: variable.parameter.c3
                  - include: "#attribute"
          # Enum body
          - begin: \{
            beginCaptures:
              0: { name: meta.enum.body.c3 meta.block.c3 punctuation.section.block.begin.c3 }
            end: \}
            endCaptures:
              0: { name: meta.enum.body.c3 meta.block.c3 punctuation.section.block.end.c3 }
            contentName: meta.enum.body.c3 meta.block.c3
            patterns:
              - include: "#comments"
              - begin: \=
                beginCaptures:
                  0: { name: keyword.operator.assignment.c3 }
                end: (?=,)
                patterns:
                  - include: "#expression"
              - include: "#attribute"
              - match: '\b{{CONST}}\b'
                name: variable.other.enummember.c3
              - match: ','
                name: punctuation.separator.c3

      # Interface
      - begin: '(?=\binterface\b)'
        end: (?<=\})
        patterns:
          - begin: '\binterface\b'
            beginCaptures: 
              0: { name: meta.interface.c3 keyword.declaration.interface.c3 }
            end: (?=\{)
            contentName: meta.interface.c3
            patterns:
              - include: "#comments"
              - match: '\b{{TYPE}}\b'
                name: entity.name.type.interface.c3
              - include: "#attribute"
          # Interface body
          - begin: \{
            beginCaptures:
              0: { name: meta.interface.body.c3 meta.block.c3 punctuation.section.block.begin.c3 }
            end: \}
            endCaptures:
              0: { name: meta.interface.body.c3 meta.block.c3 punctuation.section.block.end.c3 }
            contentName: meta.interface.body.c3 meta.block.c3
            patterns:
              - include: "#comments"
              - match: ';'
                name: punctuation.terminator.c3
              - include: "#function"

      # Untyped constant
      - begin: '\b{{CONST}}\b'
        beginCaptures:
          0: { name: variable.other.constant }
        end: ;
        endCaptures:
          0: { name: punctuation.terminator.c3 }
        patterns:
          - include: "#comments"
          - begin: \=
            beginCaptures:
              0: { name: keyword.operator.assignment.c3 }
            end: (?=;)
            patterns:
              - include: "#expression"

      # Global
      - include: "#declaration"

  function_header:
    patterns:
      - include: "#type"
      - match: '\.'
        name: punctuation.accessor.c3
      - match: '\@?{{IDENT}}'
        name: entity.name.function.c3

  function:
    begin: (?=\b(fn|macro)\b)
    end: (?<=\})|(?=[;,)])
    patterns:
      # Before parameters
      - begin: \b(fn|macro)\b
        beginCaptures:
          1: { name: meta.function.c3 keyword.declaration.function.c3 }
        end: '(?=\()'
        contentName: meta.function.c3
        patterns:
          - include: "#comments"
          - include: "#function_header"
      # Parameters
      - begin: \(
        beginCaptures:
          0: { name: meta.function.parameters.c3 meta.group.c3 punctuation.section.group.begin.c3 }
        end: \)
        endCaptures:
          0: { name: meta.function.parameters.c3 meta.group.c3 punctuation.section.group.end.c3 }
        contentName: meta.function.parameters.c3 meta.group.c3
        patterns:
          - include: "#comments"
          - include: "#type"
          - include: "#punctuation"
          - match: '&'
            name: keyword.operator.c3
          - match: '\.\.\.'
            name: keyword.operator.variadic.c3
          - match: ';'
            name: punctuation.separator.c3
          # Macro body parameter
          - begin: '(@{{IDENT}})\s*(\()'
            beginCaptures:
              1 : { name: variable.parameter.c3 }
              2 : { name: punctuation.section.group.begin.c3 }
            end: \)
            endCaptures:
              0 : { name: punctuation.section.group.end.c3 }
            contentName: meta.group.c3
            patterns:
              - include: "#comments"
              - include: "#type"
              - include: "#punctuation"
          # Parameter
          - begin: '([$#@]?{{IDENT}})'
            beginCaptures:
              0 : { name: variable.parameter.c3 }
            end: '(?=[;,)])'
            patterns:
              - include: "#comments"
              - include: "#attribute"
              - match: '\.\.\.'
                name: keyword.operator.variadic.c3
              # Parameter with default value
              - begin: '\='
                beginCaptures:
                  0 : { name: keyword.operator.assignment.c3 }
                end: '(?=[;,)])'
                patterns:
                  - include: "#expression"
      # After parameters
      - begin: '(?<=\))'
        end: (?=[{=;])
        contentName: meta.function.c3
        patterns:
          - include: "#comments"
          - include: "#attribute"
      # Function  body
      - begin: \{
        beginCaptures:
          0: { name: meta.function.c3 meta.block.c3 punctuation.section.block.begin.c3 }
        end: \}
        endCaptures:
          0: { name: meta.function.c3 meta.block.c3 punctuation.section.block.end.c3 }
        contentName: meta.function.c3 meta.block.c3
        patterns:
          - include: "#statements"
      # Lambda function body
      - begin: \=>
        beginCaptures:
          0: { name: meta.function.c3 keyword.declaration.function.arrow.c3 }
        end: '(?=[;,)])'
        contentName: meta.function.c3
        patterns:
          - include: "#expression"

  structlike:
    begin: '(?=\b(?:(struct|bitstruct)|(union))\b)'
    end: (?<=\})
    patterns:
      - begin: '\b(?:(struct|bitstruct)|(union))\b'
        beginCaptures: 
          1: { name: meta.struct.c3 keyword.declaration.struct.c3 }
          2: { name: meta.struct.c3 keyword.declaration.union.c3 }
        end: (?=\{)
        contentName: meta.struct.c3
        patterns:
          - include: "#comments"
          - match: '{{TYPE}}'
            name: entity.name.type.struct.c3
          - match: '{{IDENT}}'
            name: variable.other.member.c3
          - include: "#attribute"
          - begin: ':'
            beginCaptures:
              0 : { name: punctuation.separator.c3 }
            end: (?=\{)
            patterns:
              - include: "#comments"
              - include: "#type"
              - include: "#attribute"
          # Interface implementation
          - begin: '\('
            beginCaptures:
              0: { name: meta.group.c3 punctuation.section.group.begin.c3 }
            end: '\)'
            endCaptures:
              0: { name: meta.group.c3 punctuation.section.group.end.c3 }
            contentName: meta.group.c3 
            patterns:
              - include: "#comments"
              - include: "#path"
              - include: "#type"
              - include: "#punctuation"
      # Struct body
      - begin: \{
        beginCaptures:
          0: { name: meta.struct.body.c3 meta.block.c3 punctuation.section.block.begin.c3 }
        end: \}
        endCaptures:
          0: { name: meta.struct.body.c3 meta.block.c3 punctuation.section.block.end.c3 }
        contentName: meta.struct.body.c3 meta.block.c3
        patterns:
          - include: "#comments"
          - include: "#structlike"
          - include: "#modifier_keywords"
          - include: "#type"
          - match: '{{IDENT}}'
            name: variable.other.member.c3
          - include: "#attribute"
          - match: ';'
            name: punctuation.terminator.c3
          # Bitstruct
          - begin: ':'
            beginCaptures:
              0 : { name: punctuation.separator.c3 }
            end: (?=;)
            patterns:
              - include: "#expression"

  builtin:
    patterns:
      - match: '(\$\${{CONST}})\b|(\$\${{IDENT}})\b'
        captures:
          1: { name: constant.language.c3 }
          2: { name: entity.name.function.builtin.c3 }

  keywords:
    patterns:
      - match: '\$(?:{{ct_keyword}})\b'
        name: keyword.other.ct.c3
      - match: '\$(?:{{ct_control_keyword}})\b'
        name: keyword.control.ct.c3
      - match: '\b(?:{{keyword}})\b'
        name: keyword.other.c3
      - match: '\b(?:{{control_keyword}})\b'
        name: keyword.control.c3

  modifier_keywords:
    patterns:
      - match: '\b(?:const|extern|static|tlocal|inline)\b'
        name: storage.modifier.c3
  
  punctuation:
    patterns:
      # No semicolon here because we always match it separately
      - match: ','
        name: punctuation.separator.c3
      - match: ':'
        name: punctuation.separator.c3
      - match: ':(?!:)'
        name: punctuation.separator.c3
      - match: '::|\.(?!\.\.)'
        name: punctuation.accessor.c3

  constants:
    patterns:
      - match: '\b(true|false|null)\b'
        name: constant.language.c3
      - match: '\b{{CONST}}\b'
        name: variable.other.constant

  operators:
    patterns:
      - match: '\+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\='
        name: keyword.operator.assignment.augmented.c3
      - match: '<\=|>\=|\=\=|<|>|\!\='
        name: keyword.operator.comparison.c3
      - match: '\.\.\.'
        name: keyword.operator.variadic.c3
      - match: '\.\.'
        name: keyword.operator.range.c3
      - match: '\+\+|--'
        name: keyword.operator.arithmetic.c3
      - match: '<<|>>|&&&?|\|\|\|?'
        name: keyword.operator.arithmetic.c3
      - match: '\+|\-|/|%|\||\^|~'
        name: keyword.operator.arithmetic.c3
      - match: '\='
        name: keyword.operator.assignment.c3
      - match: '!|\?[?:]?|\*|&|:'
        name: keyword.operator.c3

  path:
    match: '({{IDENT}})(::)'
    captures: 
      1: { name: meta.path.c3 }
      2: { name: meta.path.c3 punctuation.separator.scope-resolution.c3 }

  literals:
    patterns:
      - include: "#string_literal"
      - include: "#char_literal"
      - include: "#raw_string_literal"
      - include: "#real_literal"
      - include: "#integer_literal"

  char_literal:
    begin: "'"
    beginCaptures:
      0: { name: string.quoted.single.c3 punctuation.definition.string.begin.c3 }
    end: "'"
    endCaptures:
      0: { name: string.quoted.single.c3 punctuation.definition.string.end.c3 }
    contentName: string.quoted.single.c3
    patterns:
      - match: '\\.'
        name: constant.character.escape.c3

  string_literal:
    begin: '"'
    beginCaptures:
      0: { name: string.quoted.double.c3 punctuation.definition.string.begin.c3 }
    end: '"'
    endCaptures:
      0: { name: string.quoted.double.c3 punctuation.definition.string.end.c3 }
    contentName: string.quoted.double.c3
    patterns:
      - match: '\\([0abefnrtv''"\\]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})'
        name: constant.character.escape.c3

  raw_string_literal:
    begin: '`'
    beginCaptures:
      0: { name: string.quoted.other.c3 punctuation.definition.string.begin.c3 }
    end: '`(?!`)'
    endCaptures:
      0: { name: string.quoted.other.c3 punctuation.definition.string.end.c3 }
    contentName: string.quoted.other.c3
    patterns:
      - match: '``'
        name: constant.character.escape.c3

  real_literal:
    patterns:
      - match: '\b{{INT}}{{REALTYPE}}\b'
        name: constant.numeric.float.c3
      - match: '\b(?:{{INT}}{{E}}|{{INT}}\.{{INT}}({{E}})?)(?:{{REALTYPE}})?\b'
        name: constant.numeric.float.c3
      - match: '\b(?:0[xX]{{HINT}}{{P}}|0[xX]{{HINT}}\.{{HINT}}{{P}}){{REALTYPE}}?\b'
        name: constant.numeric.float.c3

  integer_literal:
    match: '\b(?:{{INT}}|0[xX]{{HINT}}|0[oO]{{OINT}}|0[bB]{{BINT}}){{INTTYPE}}?\b'
    name: constant.numeric.integer.c3

  comments:
    patterns:
      - include: "#line_comment"
      - include: "#block_comment"
      - include: "#doc_comment"

  line_comment:
    match: //.*$
    name: comment.line.double-slash.c3

  block_comment:
    begin: '/\*(?!\*)'
    beginCaptures:
      0: { name: comment.block.c3 punctuation.definition.comment.begin.c3 }
    end: '\*/'
    endCaptures:
      0: { name: comment.block.c3 punctuation.definition.comment.end.c3 }
    contentName: comment.block.c3
    patterns:
      - include: "#block_comment_body"

  block_comment_body:
    patterns:
      - begin: '/\*'
        end: '\*/'
        patterns:
          - include: "#block_comment_body"

  doc_comment:
    begin: '<\*'
    beginCaptures:
      0: { name: comment.block.documentation.c3 punctuation.definition.comment.begin.c3 }
    end: '\*>'
    endCaptures:
      0: { name: comment.block.documentation.c3 punctuation.definition.comment.end.c3 }
    contentName: comment.block.documentation.c3
    patterns:
      - include: "#doc_comment_body"

  doc_comment_body:
    patterns:
      - begin: '/\*'
        end: '\*/'
        patterns:
          - include: "#block_comment_body"
      - match: '@(param(\s*\[&?(in|out|inout)\])?|return!?|require|fails|deprecated|ensure|pure)\s'
        name: markup.bold
  
  type_suffix:
    patterns:
      - include: "#brackets"
      - match: '\*'
        name: keyword.operator.address.c3
      - match: '\!'
        name: keyword.operator.c3

  type:
    patterns:
      - include: "#path"

      - begin: '\b({{base_type}})\b|(\$?\b{{TYPE}}\b)'
        beginCaptures:
          1: { name: storage.type.built-in.primitive.c3 }
          # Alternatives
          #1: { name: storage.type.built-in.c3 }
          #1: { name: storage.type.primitive.c3 }
          2: { name: support.type.c3 }
        #contentName: meta.type_suffix.c3
        end: (?![*\[!\s]|\(\<)
        patterns:
          - include: "#generic_params"
          - include: "#type_suffix"
      
      # "vatype": < 0.7.0, deprecated >= 0.6.2
      - begin: '(\$(?:typeof|typefrom|evaltype|vatype))\b\s*\('
        beginCaptures:
          1: { name: storage.type.c3 }
        end: \)
        patterns:
          - include: "#expression"

      # >= 0.6.2
      - begin: '(\$(?:vatype))\b\s*\['
        beginCaptures:
          1: { name: storage.type.c3 }
        end: \]
        patterns:
          - include: "#expression"

      # Matching type suffix after typeof/typefrom etc. is too hard so just do generic matches here
      - include: "#brackets"
      - match: '[*!]'
        name: keyword.operator.c3

  attribute:
    patterns:
      - begin: '(@(?:{{attribute}}|{{TYPE}}))\s*(\()'
        end: '\)'
        beginCaptures: 
          1: { name: meta.annotation.c3 keyword.annotation.c3 }
          2: { name: meta.annotation.c3 meta.group.c3 punctuation.section.group.begin.c3 }
        endCaptures:
          0: { name: meta.annotation.c3 meta.group.c3 punctuation.section.group.end.c3 }
        contentName: meta.annotation.c3 meta.group.c3
        patterns:
          - include: "#expression"
      - match: '@(?:{{attribute}}|{{TYPE}})'
        name: meta.annotation.c3 keyword.annotation.c3

  declaration:
    patterns:
      - begin: \bvar\b
        beginCaptures:
          0: { name: storage.type.var.c3 }
        end: ;
        endCaptures:
          0: { name: punctuation.terminator.c3 }
        patterns:
          # CT type
          - match: '\${{TYPE}}'
            name: support.type.c3
          - include: "#declaration_after_type"
      - begin: '(?=\$(typeof|typefrom|vatype|evaltype)\b)'
        end: ;
        endCaptures:
          0: { name: punctuation.terminator.c3 }
        patterns:
          - include: "#type"
          - include: "#declaration_after_type"
      - begin: '(?=\$?\b{{TYPE}}\b|\b(?:{{base_type}})\b)'
        end: ;
        endCaptures:
          0: { name: punctuation.terminator.c3 }
        patterns:
          - include: "#type"
          - include: "#declaration_after_type"

  declaration_after_type:
    patterns:
      - include: "#comments"
      - include: "#generic_params"
      - match: '(?<!#)\$?\b{{IDENT}}\b'
        name: variable.other.c3
      - match: '\b{{CONST}}\b'
        name: variable.other.constant
      - include: "#attribute"
      - begin: \=
        beginCaptures:
          0: { name: keyword.operator.assignment.c3 }
        end: (?=;)
        patterns:
          - include: "#expression"

  control_statements:
    patterns:
      - begin: \$for\b
        beginCaptures:
          0: { name: keyword.control.ct.c3 }
        end: (?<=\))
        patterns:
        - begin: \(
          beginCaptures:
            0: { name: punctuation.section.group.begin.c3 }
          end: \)
          endCaptures:
            0: { name: punctuation.section.group.end.c3 }
          patterns:
            - include: "#statements"
      - begin: \bfor\b
        beginCaptures:
          0: { name: keyword.control.c3 }
        end: (?<=\))
        patterns:
        - begin: \(
          beginCaptures:
            0: { name: punctuation.section.group.begin.c3 }
          end: \)
          endCaptures:
            0: { name: punctuation.section.group.end.c3 }
          patterns:
            - include: "#statements"
      - begin: '\$(?:case|default|if)\b'
        beginCaptures:
          0: { name: keyword.control.ct.c3 }
        end: ':'
        endCaptures:
          0: { name: punctuation.separator.c3 } # Override the : operator
        patterns:
          - include: "#expression"
      - begin: '\b(?:case|default)\b'
        beginCaptures:
          0: { name: keyword.control.c3 }
        end: ':'
        endCaptures:
          0: { name: punctuation.separator.c3 } # Override the : operator
        patterns:
          - include: "#expression"

  statements:
    patterns:
      - include: "#comments"
      - include: "#modifier_keywords"
      - match: ';'
        name: punctuation.terminator.c3

      - include: "#control_statements"

      - include: "#declaration"
      - include: "#expression"
      - include: "#block"

  variable:
    match: '(?<!#)\$?\b{{IDENT}}\b'
    name: variable.other.c3

  expression:
    patterns:
      - include: "#comments"
      
      - include: "#function"

      - include: "#constants"
      - include: "#builtin"
      - include: "#literals"
      - include: "#operators"
      - include: "#keywords"
      - include: "#type"
      - include: "#generic_params"
      - include: "#path"
      - include: "#function_call"
      - include: "#attribute"

      - include: "#variable"

      - include: "#parens"
      - include: "#brackets"
      - include: "#expression_block"
      - include: "#initializer_list"

      - include: "#punctuation"

  function_call:
    begin: '([@#]?{{IDENT}})(?=\s*\((?!<))'
    beginCaptures:
      1: { name: entity.name.function.c3 }
    end: '\)'
    endCaptures:
      0: { name: meta.group.c3 punctuation.section.group.end.c3 }
    patterns:
      # Argument list
      - begin: \(
        beginCaptures:
          0: { name: meta.group.c3 punctuation.section.group.begin.c3 }
        end: (?=\))
        contentName: meta.group.c3
        patterns:
          - include: "#comments"
          # Named argument
          - match: '(?<=[(\s,])(\.)([$#]?{{IDENT}})'
            captures:
              1: { name: punctuation.separator.c3 }
              2: { name: variable.parameter.c3 }
          - include: "#expression"
          - include: "#punctuation"
          - match: ';'
            name: punctuation.separator.c3

  block:
    patterns:
      - begin: \{(?!\|)
        beginCaptures:
          0: { name: meta.block.c3 punctuation.section.block.begin.c3 }
        end: (?<!\|)\}
        endCaptures:
          0: { name: meta.block.c3 punctuation.section.block.end.c3 }
        contentName: meta.block.c3
        patterns:
          - include: "#statements"
  
  parens:
    patterns:
      - begin: \(
        beginCaptures:
          0: { name: meta.group.c3 punctuation.section.group.begin.c3 }
        end: \)
        endCaptures:
          0: { name: meta.group.c3 punctuation.section.group.end.c3 }
        contentName: meta.group.c3
        patterns:
          - include: "#expression"

  brackets:
    patterns:
      - begin: '\[<?'
        beginCaptures:
          0: { name: meta.brackets.c3 punctuation.section.brackets.begin.c3 }
        end: '>?\]'
        endCaptures:
          0: { name: meta.brackets.c3 punctuation.section.brackets.end.c3 }
        contentName: meta.brackets.c3
        patterns:
          - include: "#expression"
  
  generic_params:
    patterns:
      - begin: '\(<'
        end: '>\)'
        beginCaptures:
          0: { name: meta.generic.c3 punctuation.definition.generic.begin.c3 }
        endCaptures:
          0: { name: meta.generic.c3 punctuation.definition.generic.end.c3 }
        contentName: meta.generic.c3
        patterns:
          - include: "#expression"

  expression_block:
    patterns:
      - begin: \{\|
        beginCaptures:
          0: { name: meta.block.c3 punctuation.section.block.begin.c3 }
        end: \|\}
        endCaptures:
          0: { name: meta.block.c3 punctuation.section.block.end.c3 }
        contentName: meta.block.c3
        patterns:
          - include: "#statements"

  initializer_list:
    patterns:
      - begin: \{
        beginCaptures:
          0: { name: meta.block.c3 punctuation.section.block.begin.c3 }
        end: \}
        endCaptures:
          0: { name: meta.block.c3 punctuation.section.block.end.c3 }
        contentName: meta.block.c3
        patterns:
          - include: "#expression"